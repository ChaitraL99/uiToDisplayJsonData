{"version":3,"sources":["MainPage.js","App.js","serviceWorker.js","index.js"],"names":["MainPage","handleClose","setState","show","handleShow","event","name","instanceId","handleDateChange","date","userGivenDate","state","Date","activityData","activityDataNull","preventDefault","data","members","map","member","real_name","activity_periods","act","start_time","includes","moment","format","tempActivityData","push","className","id","i","key","Modal","this","onHide","Header","closeButton","Title","Body","onSubmit","handleSubmit","selected","onChange","type","value","Card","end_time","Footer","Button","variant","onClick","React","Component","App","props","contacts","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2SA6IeA,G,wDAnIb,aAAe,IAAD,8BACZ,gBASFC,YAAc,WACZ,EAAKC,SAAS,CAAEC,MAAM,KAXV,EAadC,WAAa,SAACC,EAAOC,GACnB,EAAKJ,SAAS,CAAEC,MAAM,EAAMI,WAAYD,KAd5B,EAwCdE,iBAAmB,SAACC,GAClB,EAAKP,SAAS,CACZQ,cAAeD,KAxCjB,EAAKE,MAAQ,CACXR,MAAM,EACNO,cAAe,IAAIE,KACnBC,aAAc,GACdN,WAAY,GACZO,iBAAkB,IAPR,E,yDAiBDT,GAAQ,IAAD,OAClBA,EAAMU,iBAENC,EAAKC,QAAQC,KAAI,SAACC,GACZA,EAAOC,YAAc,EAAKT,MAAMJ,YAClCY,EAAOE,iBAAiBH,KAAI,SAACI,GAC3B,GACEA,EAAIC,WAAWC,SACbC,IAAO,EAAKd,MAAMD,eAAegB,OAAO,eAE1C,CACA,IAAIC,EAAgB,YAAO,EAAKhB,MAAME,cACtCc,EAAiBC,KAAKN,GACtB,EAAKpB,SAAS,CAAEW,aAAcc,SAE9B,EAAKzB,SAAS,CACZY,iBAAkB,4C,+BAa5B,OACE,6BACE,yBAAKe,UAAU,sBAAsBC,GAAG,WACtC,uBAAGD,UAAU,YAAb,SACA,yBAAKA,UAAU,MAAMC,GAAG,WACrBd,EAAKC,QAAQC,KAAI,SAAUC,EAAQY,GAAI,IAAD,OACrC,OACE,yBACEC,IAAKD,EACLF,UAAU,wDACVC,GAAG,WAEH,kBAACG,EAAA,EAAD,CAAO9B,KAAM+B,KAAKvB,MAAMR,KAAMgC,OAAQD,KAAKjC,aACzC,kBAACgC,EAAA,EAAMG,OAAP,CAAcC,aAAW,GACvB,kBAACJ,EAAA,EAAMK,MAAP,2BACsBJ,KAAKvB,MAAMJ,aAGnC,kBAAC0B,EAAA,EAAMM,KAAP,KACE,0BAAMC,SAAU,SAACnC,GAAD,OAAW,EAAKoC,aAAapC,KAC3C,kBAAC,IAAD,CACEqC,SAAUR,KAAKvB,MAAMD,cACrBiC,SAAUT,KAAK1B,mBAGjB,2BAAOoC,KAAK,SAASC,MAAM,WAE7B,6BACE,8CAAoBX,KAAKvB,MAAMJ,WAA/B,KACA,2BAAI2B,KAAKvB,MAAMG,kBACdoB,KAAKvB,MAAME,aAAaK,KAAI,SAACI,GAC5B,OACE,kBAAC,IAAD,KACE,kBAACwB,EAAA,EAAKP,KAAN,KACE,+CAEGd,IACCH,EAAIC,WACJ,uBACAG,OAAO,gBAEX,2CAEGD,IACCH,EAAIC,WACJ,uBACAG,OAAO,YAEX,yCAEGD,IACCH,EAAIyB,SACJ,uBACArB,OAAO,mBAQvB,kBAACO,EAAA,EAAMe,OAAP,KACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAASjB,KAAKjC,aAA1C,WAKJ,kBAACgD,EAAA,EAAD,CACEpB,UAAU,aACVsB,QAAS,SAAC9C,GAAD,OACP,EAAKD,WAAWC,EAAOc,EAAOC,aAG/BD,EAAOC,cAIbc,a,GA5HQkB,IAAMC,YCUdC,E,kDAfb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACD5C,MAAQ,CACX6C,SAAU,IAHK,E,qDAQjB,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,W,GAXUuB,IAAMC,WCSJI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f5854d99.chunk.js","sourcesContent":["import React from \"react\";\r\nimport data from \"./test_json.json\";\r\nimport \"./MainPage.css\";\r\nimport * as ReactBootstrap from \"react-bootstrap\";\r\nimport { Modal, Button, Card } from \"react-bootstrap\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport moment from \"moment\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nclass MainPage extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      show: false,\r\n      userGivenDate: new Date(),\r\n      activityData: [],\r\n      instanceId: \"\",\r\n      activityDataNull: \"\",\r\n    };\r\n  }\r\n  handleClose = () => {\r\n    this.setState({ show: false });\r\n  };\r\n  handleShow = (event, name) => {\r\n    this.setState({ show: true, instanceId: name });\r\n  };\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    data.members.map((member) => {\r\n      if (member.real_name === this.state.instanceId) {\r\n        member.activity_periods.map((act) => {\r\n          if (\r\n            act.start_time.includes(\r\n              moment(this.state.userGivenDate).format(\"MMM D YYYY\")\r\n            )\r\n          ) {\r\n            let tempActivityData = [...this.state.activityData];\r\n            tempActivityData.push(act);\r\n            this.setState({ activityData: tempActivityData });\r\n          } else {\r\n            this.setState({\r\n              activityDataNull: \"No activities found on this day\",\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n  handleDateChange = (date) => {\r\n    this.setState({\r\n      userGivenDate: date,\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"container-sm border\" id=\"mainDiv\">\r\n          <p className=\"headings\">Users</p>\r\n          <div className=\"row\" id=\"mainRow\">\r\n            {data.members.map(function (member, i) {\r\n              return (\r\n                <div\r\n                  key={i}\r\n                  className=\"col-5 ml-4 border border-primary rounded user my-auto\"\r\n                  id=\"mainCol\"\r\n                >\r\n                  <Modal show={this.state.show} onHide={this.handleClose}>\r\n                    <Modal.Header closeButton>\r\n                      <Modal.Title>\r\n                        Activity period of {this.state.instanceId}\r\n                      </Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                      <form onSubmit={(event) => this.handleSubmit(event)}>\r\n                        <DatePicker\r\n                          selected={this.state.userGivenDate}\r\n                          onChange={this.handleDateChange}\r\n                        />\r\n\r\n                        <input type=\"submit\" value=\"check\" />\r\n                      </form>\r\n                      <div>\r\n                        <p>The activity of {this.state.instanceId} </p>\r\n                        <p>{this.state.activityDataNull}</p>\r\n                        {this.state.activityData.map((act) => {\r\n                          return (\r\n                            <ReactBootstrap.Card>\r\n                              <Card.Body>\r\n                                <div>\r\n                                  Activities on :\r\n                                  {moment(\r\n                                    act.start_time,\r\n                                    \"MMM DD YYYY hh:mm A\"\r\n                                  ).format(\"MMM DD YYYY\")}\r\n                                </div>\r\n                                <div>\r\n                                  Start time:\r\n                                  {moment(\r\n                                    act.start_time,\r\n                                    \"MMM DD YYYY hh:mm A\"\r\n                                  ).format(\"hh:mm A\")}\r\n                                </div>\r\n                                <div>\r\n                                  End time:\r\n                                  {moment(\r\n                                    act.end_time,\r\n                                    \"MMM DD YYYY hh:mm A\"\r\n                                  ).format(\"hh:mm A\")}\r\n                                </div>\r\n                              </Card.Body>\r\n                            </ReactBootstrap.Card>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                      <Button variant=\"secondary\" onClick={this.handleClose}>\r\n                        Close\r\n                      </Button>\r\n                    </Modal.Footer>\r\n                  </Modal>\r\n                  <Button\r\n                    className=\"memberName\"\r\n                    onClick={(event) =>\r\n                      this.handleShow(event, member.real_name)\r\n                    }\r\n                  >\r\n                    {member.real_name}\r\n                  </Button>\r\n                </div>\r\n              );\r\n            }, this)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainPage;\r\n","import React from \"react\";\nimport MainPage from \"./MainPage\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      contacts: [],\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <MainPage />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}